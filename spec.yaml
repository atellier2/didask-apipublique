openapi: 3.0.1
info:
  title: API Publique de Didask
  version: "1.1.0"
  contact:
    name: Didask
    email: assistance@didask.com
    url: https://didask.com
  description: |-
    # API Publique Didask
    ## Introduction
    L‚ÄôAPI Didask vous permet principalement de :
    - g√©rer l'organisation des utilisateurs de votre application Didask
    - consulter l'avancement de l'apprentissage des apprenants.

    Si vous souhaitez g√©rer le contenu des publications (=contenus p√©dagogiques),
    il est n√©cessaire de passer par le syst√®me SCORM √©galement g√©r√© par Didask. L'API publique ne sera pas adapt√©e.

    Exemple courant d'usage de l'API Publique : 
      - Cr√©ation des utilisateurs
      - R√©cup√©ration de l'avancement des apprentissages
      
    ## Documentation fonctionnelle
    ### Espaces de travail
    L‚Äôapplication Didask est organis√©e en espaces de travail. Ces espaces permettent d'organiser les groupes d'utilisateurs, les publications, etc.

    > üí° L'espace de travail est un √©l√©ment structurant de la plateforme Didask. Rapprochez-vous de votre consultant Didask pour les utiliser √† bon escient.

    L'[API](#tag/Espace-de-travail) vous permet de r√©aliser les principales op√©rations sur les espaces de travail (Consultation, cr√©ation, modification et suppression).

    ### Publications
    Les publications sont les contenus p√©dagogiques mis √† disposition des apprenants. 
    
    L'[API]((#tag/Publication)) vous permet de les consulter mais pas de les modifier. Pour interfacer les publications, pr√©f√©rez l'utilisation du SCORM Connect

    ### Groupe d'utilisateur
    Les groupes d'utilisateur permettent de donner l'acc√®s √† certaines  publications √† des utilisateur en d√©finissant le r√¥le qu'ils jouent vis-√†-vis de ces publications.
    Les r√¥les possibles sont : 
      - ``learner`` : apprenant
      - ``coach`` : animateur
      - ``author`` : concepteur
      - ``admin`` : administrateur
    
    Les groupes sont d√©finis √† l‚Äôint√©rieur d‚Äôun espace de travail et ne peuvent appartenir qu‚Äô√† un seul espace de travail.

    Deux groupes de travail ne peuvent pas avoir le m√™me nom et ce, m√™me s‚Äôils sont dans deux espaces de travail diff√©rents.

    Un groupe utilisateur peut avoir une date d'expiration qui est une date optionnelle √† partir de laquelle les apprenants 
    n'auront plus acc√®s aux publications.

    L'[API](#tag/Groupe-d'utilisateurs) vous permet de r√©aliser les principales op√©rations de gestion des groupes d'utilisateur (cr√©ation, modification, suppression, affectation d'utilisateurs).

    ### Utilisateurs
    Un utilisateur peut appartenir √† plusieurs espaces de travail mais il ne peut avoir le r√¥le d'apprenant que dans un seul espace de travail.
    La cl√© d‚Äôunicit√© de l‚Äôutilisateur est donn√©e par son adresse email. Il n‚Äôest pas possible de cr√©er deux utilisateurs avec deux id diff√©rents et le m√™me email.

    ## Documentation technique
    ### Environnement
    D√®s lors que vous avez un environnement Didask vous avez acc√®s √† l'API publique.

    Cette API est disponible √† l'adresse ```votrenom.didaks.com/api/v1```
    ### Authentification
    L'authentification se fait √† l'aide de l'API ```votrenom.didaks.com/api/login/auth```. 

    > üí°Notez qu'il n'y a pas le ``v1`` dans l'URL
    
    L'authentification peut √™tre r√©alis√©e par login/mot de passe ou via l'authentification SSO.

    Seuls les utilisateurs ayant le r√¥le d'enseignant peuvent utiliser cette API.

    Dans les deux cas, l'API vous renverra un cookie  contenant 
    la cl√© `sid`. Le cookie `sid` doit ensuite √™tre inclus dans les requ√™tes pour acc√©der aux API.

    ```
    **Request Headers**
    User-Agent: xxxxxxx
    Cookie: sid=670e24927e3b774eff8bf73e
    ...
    ```

    Cette authentification est valable 1 journ√©e (24h).  

    ### Identifiants uniques
    Chaque ressource (publication, utilisateur, groupe, espace, etc.) est identifi√©e de mani√®re unique par un id qui est g√©n√©r√© uniquement par Didask et qui est non modifiable. 
    Cet ID est une cha√Æne de 12 octets (ou 24 caract√®res hexad√©cimaux).

    > Exemple : ```ertab7234eb4vbnd2e943501```

    ### Retour des API

    La plupart des API retournent les informations sous le format suivant : 


    ```json
    {
        // Donn√©es que vous avez demand√©es
        "data": [
            //Les donn√©es sont organis√©es en une liste avec une
            //ou plusieurs valeurs en fonction du type de demande.
            {
                "cle": "valeur",
                "cle2": "valeur2",
                ...
            }
        ],

        //Dans le cas o√π il y a une erreur, le bloc suivant sera retourn√© sinon 
        //la cl√© ``error`` prendra la valeur ``null``v
        "error": {
            "id": "f1c8711f-0a0f-4869-8922-3f41f2e26d82",
            "message": "Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer",
            "code": "error.unknown",
            "status": 500,
            "cause": {
                "message": "Compl√©ment d'informations"
            }
        }
    }
    ```

    ### Codes retour
    De mani√®re g√©n√©rale, les codes retours utilis√©s sont les codes standards : 

    - 2XX : l'appel a r√©ussi
    - 500 : l'appel a √©chou√©. C'est principalement le cas quand les donn√©es communiqu√©es n'ont pas le bon format

    ### Tests de l'API

    Pour tester l'API, vous pouvez utiliser un outil tel que Postman ou CURL. La sp√©cification est librement t√©l√©chargeable (en haut de la page).
    Cette sp√©cification peut √™tre import√©e dans Postman (https://learning.postman.com/docs/getting-started/importing-and-exporting/importing-from-swagger/)


servers:
  - url: https://votrenom.didask.com/api/v1
    description: Serveur de test
security:
  - CookieAuth: []
tags:
  - name: Authentification
    description: Comment se connecter √† Didask ?
  - name: Espace de travail
    description: Actions sur les espaces de travail
    externalDocs:
      url: >-
        https://help.didask.com/fr/articles/9154880-comment-organiser-et-segmenter-ma-plateforme-par-espaces-de-formation
  - name: Groupe d'utilisateurs
    description: Actions sur les groupes d'utilisateur
  - name: Utilisateur
    description: Gestion des utilisateurs de la plateforme Didask
  - name: Publication
    description: >-
      Liste des publications et de l'avancement des apprenants. 

paths:
  /users:
    get:
      summary: Liste des utilisateurs avec les publications auxquelles ils on acc√®s.
      operationId: getUser
      description: |-
        Cette API permet de lister les utilisateurs Didask en filtrant sur diff√©rents param√®tres (le nom, le matricule, l'email ...)

        Par d√©faut, seuls 10 utilisateurs sont retourn√©s. Vous pouvez ajuster l'index de pagination pour acc√©der aux utilisateurs suivants.
        Le nombre d'utilisateurs par page est param√©trable.

        Pour chaque utilisateur, les informations d√©taill√©es ainsi que la liste des publications auxquelles il a acc√®s sont renvoy√©es.

        Note : Cette API est limit√©e √† un seul espace de travail par appel.
      parameters:
        - in: query
          name: limit
          required: false
          description: Nombre d'utilisateurs √† retourner (0 = illimit√©). Par d√©faut, 10 utilisateurs sont retourn√©s.
          schema:
            type: integer
            default: 10
          example: 10
        - in: query
          name: skip
          required: false
          description: Index du premier utilisateur √† retourner pour la pagination (d√©calage).
          schema:
            type: integer
            default: 0
          example: 0
        - in: query
          name: spaceId
          required: false
          description: Filtrer par ID d'espace de travail. Si non renseign√©, l'espace de travail par d√©faut est utilis√©.
          schema:
            type: string
          example: 65305dfc128086ef68c5d03f
        - in: query
          name: email
          required: false
          description: Filtrer par une partie de l'email de l'utilisateur.
          schema:
            type: string
          example: dupont@
        - in: query
          name: accessCode
          required: false
          description: Matricule de l'utilisateur
          schema:
            type: string
        - in: query
          name: id
          required: false
          description: Filtrer sur l'ID de l'utilisateur
          schema:
            $ref: '#/components/schemas/DidaskId'
          example: 65305dfc128086ef68c5d03f
      tags:
        - Utilisateur
      responses:
        '200':
          description: Liste des utilisateurs correspondants aux crit√®res de recherche.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Liste des utilisateurs filtr√©s.
                    items:
                      $ref: '#/components/schemas/Utilisateur'
                  totalUsers:
                    type: integer
                    description: Nombre total d'utilisateurs correspondant aux filtres appliqu√©s.
                    example: 225
                  error:
                    type: object
                    description: Champ null, utilis√© uniquement en cas d'erreur.
                    nullable: true
        '400':
          description: Erreur lors de la recherche des utilisateurs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'

    post:
      summary: Cr√©ation d'un nouvel utilisateur
      description: |
        L'utilisateur sera ajout√© √† l'espace de travail par d√©faut si aucun `spacesIds` n'est sp√©cifi√©.
        
        
        Lors de sa cr√©ation, l'utilisateur a automatiquement un r√¥le "apprenant" (Learner) qui lui est donn√© sur l'espace de travail de rattachement.


        Soit on utilise l'identification par email/mot de passe, soit on utilise la connexion SSO via oidcIssuer et oidcSubject.
      tags:
        - Utilisateur
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email de l'utilisateur √† cr√©er
                  example: "john.doe@example.com"
                password:
                  type: string
                  pattern: "^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z-9]{8,}$"
                  #quel pattern faut il respecter ?
                  description: |
                      Mot de passe en clair de l'utilisateur √† cr√©er.
                      Il doit contenir 8 cract√®res minimum:  avec au moins une lettre et un chiffre
                  example: "password123"
                firstName:
                  type: string
                  description: Pr√©nom de l'utilisateur √† cr√©er
                  example: "John"
                lastName:
                  type: string
                  description: Nom de famille de l'utilisateur √† cr√©er
                  example: "Doe"
                spacesIds:
                  type: array
                  items:
                      $ref: "#/components/schemas/DidaskId"
                  description: >
                      Liste d'ID des espaces de travail o√π l'utilisateur sera ajout√©. Si aucun espace de travail 
                      n'est fourni, l'utilisateur sera cr√©√© dans l'espace de travail par d√©faut.
                  example: ["65305dfc128086ef68c5d03f"]
                oidcIssuer:
                  type: string
                  description: >
                      Identifiant du fournisseur d'identit√© OpenID Connect (OIDC) qui a √©mis le jeton pour cet utilisateur.
                  example: "https://example-oidc.com/"
                oidcSubject:
                  type: string
                  description: >
                      Identifiant unique de l'utilisateur dans le cadre de l'authentification OpenID Connect (OIDC).
                  example: "abcd1234"
                accessCode:
                  type: string
                  description: "Matricule ou code d'acc√®s √† la plateforme. (Mode d'authentification alternatif √† l'email/password)"
                  example: "moncode23154"
      responses:
        '200':
          description: Utilisateur cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Utilisateur'
                  error:
                    type: object
                    nullable: true
                    description: Null lorsque la cr√©ation a r√©ussie
        '400':
            description: Erreur lors de la cr√©ation de l'utilisateur.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error: 
                      $ref: '#/components/schemas/Error'
        '500':
            description: |
                Erreur lors de la cr√©ation de l'utilisateur.

                Les causes possibles sont : 
                  - Les donn√©es fournies n'ont pas le format demand√©. (Exemple : mot de passe qui n'a pas la bonne syntaxe)
                  - Un utilisateur avec cet email existe d√©j√†.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error: 
                      $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      
      tags:
        - Utilisateur
      summary: 
        R√©cup√®re un utilisateur sp√©cifique par son ID
      description: >
       R√©cup√®re les informations d√©taill√©es d'un utilisateur sp√©cifique par son ID.

       > üö® Il est pr√©f√©rable de passer par l'[API ``GET /users?id=xxxxx``](#tag/Utilisateur/operation/getUser)
      deprecated: true
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID de l'utilisateur
      responses:
        '200':
          description: Fiche d√©taill√©e de l'utilisateur.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilisateur'
    put:
      summary: Mettre √† jour un utilisateur sp√©cifique
      description: Met √† jour les informations d'un utilisateur sp√©cifique par son ID.
      tags:
          - Utilisateur
      parameters:
      - in: path
        name: userId
        schema:
          type: string
        required: true
        description: ID de l'utilisateur
      requestBody:
        content:
          application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Email de l'utilisateur
                    example: "john.doe@example.com"
                  first_name:
                    type: string
                    description: Pr√©nom de l'utilisateur
                    example: "John"
                    #FIXME : Mettre en camel case comme dans le post
                  last_name:
                    type: string
                    description: Nom de famille de l'utilisateur
                    example: "Doe"
                    #fixme : mettre en camel case comme dans le post
                  isStandard:
                    type: boolean
                    deprecated: true
                    description: Sp√©cifie si l'utilisateur est un utilisateur standard
                    example: true
      responses:
        '200':
            description: Fiche de l'utilisateur avec les nouvelles donn√©es mises √† jour
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Utilisateur'
      
  /users/{userId}/account-availability:
    put:
      summary: Mettre √† jour la disponibilit√© d'un utilisateur.
      description: |
              Cette API peut √™tre utilis√©e pour activer ou d√©sactiver un Utilisateur

              Lorsqu'un utilisateur est d√©sactiv√©, la date ``disabledDate`` est mise √† jour automatiquement.
              De m√™me, lorsqu'un utilisateur est r√©activ√©, la date ``disabledDate` est r√©initialis√©e.

              üö® Lorsqu'un utilisateur est d√©sactiv√©, il est supprim√© de tous les groupes auxquels il appartient et lors de sa r√©activation
              il reste sans groupe.

              Remarque : si vous atteignez le nombre maximal de licence pour votre organisation, vous aurez une erreur 403.
      tags:
        - Utilisateur
      parameters:
        - in: path
          name: userId
          required: true
          description: "ID de l'utilisateur"
          schema:
              $ref: '#/components/schemas/DidaskId'

      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                disable:
                  type: boolean
                  description: Est ce que l'utilisateur doit √™tre d√©sactiv√© (true) ou non (false)
                  example: true
      responses:
        '200':
            description: Fiche de l'utilisateur avec les nouvelles donn√©es mises √† jour
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Utilisateur'
        '403':
            description: |
                      Erreur de lors de l'activation de l'utilisateur. 

                      V√©rifiez que vous n'avez pas atteint le nombre maximal d'utilisateurs pour votre organisation
                  

  /publications:
    get:
      summary: Liste des publications
      description: |
        Cette API vous permet d'avoir la liste des publications disponibles.

        Pour chaque publication est √©galement accessible la liste des utilisateurs et
        celle des groupes y ayant acc√®s.
      tags:
        - Publication
      security:
        - CookieAuth: []
      responses:
        '200':
          description: Liste de toutes les publications
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Tableau de publications
                    items:
                      $ref: '#/components/schemas/Publication'
                additionalProperties: false

  /publications/{publicationId}:
    get:
      summary: R√©cup√©rer une publication sp√©cifique
      description: R√©cup√®re les informations d'une publication sp√©cifique par son ID.
      tags:
        - Publication
      parameters:
        - in: path
          name: publicationId
          description: Id de la publication que l'on souhaite consulter
          required: true
          schema:
            $ref: '#/components/schemas/DidaskId'
          example: "ussd97115800497115800g20"
      responses:
        '200':
          description: Informations sur une publication sp√©cifique
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/Publication'   
        '404':
          description: La publication n'existe pas
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    #FIXME : Modifier le format de r√©ponse pour utiliser le format d'erreur par d√©faut
                    example: Publication not found
        '500':
          description: |
            Erreur lors de la recherche de la publication."

            Cette erreur se produit lorsque l'ID n'a pas le bon format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    #FIXME : Modifier le format de r√©ponse pour utiliser le format d'erreur par d√©faut
                    example: Internal server error
                additionalProperties: false

  /users/invite:
    post:
      summary: Envoyer une invitation pour une publication √† un utilisateur
      #FIXME : Je n'ai pas r√©ussi √† faire fonctionner cette API.
      # Quels sont les pr√©requis techniques ?
      description: >
        Envoie une invitation par email √† 
        un utilisateur pour acc√©der √† une publication.
      #IDEA : Avoir une API api/v1/publications/invite qui envoie aux apprenants qui n'ont pas termin√© leur publication sans avoir √† lister tous les mails
      #FIXME : V√©rifier que les mails appartiennent √† des utilisateurs qui ont acc√®s √† la publication ?
      tags:
        - Utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  description: Liste des emails auxquels il faut envoyer l'invitation
                  items:
                    type: string
                  example: ["user@example.com"]
                message:
                  type: string
                  description: texte sans formatage qui va √™tre envoy√© aux utilisateurs.
                  #FIXME : interdire les formattage
                  example: "Vous √™tes invit√© √† rejoindre la publication."
                courseId:
                  #FIXME : Utiliser PublicationId comme dans les autres API ?
                  type: string
                  description: Identifiant de la publication pour laquelle l'apprenant va √™tre invit√©e.
                  example: "ussd97115800497115800g20"
                locale:
                  type: string
                  description: code de la langue du mail d'invitation.
                  enum:
                    - en
                    - cs
                    - de
                    - es
                    - fr
                    - it
                    - ja
                    - nl
                    - pl
                    - zh
                    - ar
                    - ru
                    - pt
                    - tr
                    - uk
                    - ro
                    - vi
                  example: "fr"
      responses:
        '200':
          description: Invitation envoy√©e avec succ√®s

  /auth/login:
      servers:
          - url: https://trial.didask.com/api
            description: Racine de l'API
      post:
        summary: Authentification 
        tags:
        - Authentification
        description: |-
          - Appelez l'endpoint POST d'authentification de cette API avec votre email et mot de passe 
          de la plateforme Didask.
          
          - Vous obtiendrez la valeur d'un cookie appel√© sid (identifiant de session) dans les en-t√™tes de la r√©ponse.
          Ensuite, 
          - Ajoutez le sid r√©cup√©r√© en tant que ``Cookie sid=`` dans l'en-t√™te de toute requ√™te que vous souhaitez envoyer √† cette API publique.


          >üí° Notez que seuls les utilisateurs ayant le r√¥le d'enseignant peuvent utiliser cette API.


          >üö® : cette API est la seule qui ne prend pas comme racine l'URL ``/api/v1`` mais directement ``auth/login``.
        requestBody:
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Email de l'utilisateur de connexion
                    example: user@example.com
                  password:
                    type: string
                    description: Mot de passe de l'utilisateur
                    example: userpassword
                  strategy:
                    type: string
                    enum: 
                      - "emailPassword"
                      - "sso"
                    description: Strat√©gie d'authentification (ex. "emailPassword")
                    # FIXME n'utiliser que la strat√©gie emailPassword
                    
                    example: emailPassword
              
        responses:
          '200':
            description: Connexion r√©ussie, un cookie `sid` est renvoy√©.
            headers:
              Set-Cookie:
                description: Cookie de session contenant `sid`.
                schema:
                  type: string
            content:
              application/json:
                schema:
                  type: object
                  example: {}
          '400':
            description: Connexion √©chou√©e. Les identifiant ne sont pas les bons
            content:
              application/json:
                schema:
                  type: object
                  example: {}

          '403':
            $ref: '#/components/responses/UnauthorizedError'
  /groups:
    get:
      summary: Liste des groupes d'utilisateurs
      tags:
        - Groupe d'utilisateurs
      description: >
        R√©cup√®re la liste de tous les groupes de tous les espaces de travail.

        Il est possible de filtrer sur tout ou partie du nom.
      security:
        - CookieAuth: []
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
          example: compta
          description: >
            Texte √† rechercher dans le nom des groupes d'utilisateurs.


            Le texte n'est pas sensible √† la casse. ```compta``` permettra de retrouver les groupes "Comptabilit√©, Compta, Servcice comptable, ...."
      responses:
        '200':
          description: Liste des groupes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                  error:
                    $ref: '#/components/schemas/ErrorNull'
        '403':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Cr√©er un nouveau groupe utilisateur
      tags:
        - Groupe d'utilisateurs
      description: >
        Cr√©e un nouveau groupe avec les informations fournies dans le corps de la requ√™te.

      #FIXME : Comment fait-on pour d√©finir l'espace de travail auquel rattacher le groupe ?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Nouveau groupe"
                  description: "Nom du groupe d'utilisateurs. Attention ce nom doit √™tre unique"
                trainingSpace:
                  #FIXME : on utilise parfois trainingSpace et parfois SpaceID. Rendre obsolete ce param√®tre et ajoutre SpaceID
                  type: string
                  example: "65305dfc128086ef68c5d03f"
                  description: >
                    Espace de travail auquel rattacher le groupe √† cr√©er. 
                    S'il n'est pas d√©fini, c'est l'espace de travail par d√©faut qui sera utilis√©.
                expirationDate:
                  type: string
                  example: "2023-12-31"
                  #FIXME : quel est le format √† utiliser pour la date ? Je n'y arrive pas.
                  # J‚Äôai d√©couvert un bug suite √† ta remarque, actuellement il faut passer un objet Date (new Date()) uniquement. Petite modification √† faire pour accepter les formats 2023-01-10T00:00:00.000Z, 2023-01-10, 1/10/23 1/10/23 et new Date()
                  description: "Date √† partir de laquelle les publications ne seront plus visibles pour les apprenants"
                  
      responses:
        '200':
          description: Groupe cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/GroupDetail'
                    #FIXME : Il y a une erreur sur l‚Äôapi qui retourne ce format, on retourne le document brut qui provient de la DB alors qu‚Äôil devrait √™tre format√© => Passer sur le mod√®le Group
                  error:
                    $ref: '#/components/schemas/ErrorNull'
        '400':
          description: Erreur lors de la cr√©ation du groupe d'utilisateur. L
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  
  /groups/{groupId}:
    get:
      summary: D√©tail d'un groupe d'utilisateurs
      tags:
        - Groupe d'utilisateurs
      description: >
        R√©cup√®re les informations d'un groupe sp√©cifique en utilisant son ID.

        Si le groupe n'est pas retrouv√©, l'API renvoie un objet vide.
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            $ref: '#/components/schemas/DidaskId'
          description: ID du groupe √† r√©cup√©rer
      responses:
        '200':
          description: Informations sur le groupe
          content:
            application/json:
              #TODO ourquoi ne pas garder le format d√©taill√© en sortie ? On n'a pas beaucoup de d√©tail
              schema:
                type: object
                nullable: true
                properties:
                  data:
                    $ref: '#/components/schemas/Group'
                      
              #FIXME : Mettre √† jour le format de sortie pour mettre l'error √† null comme dans les autres appels
                      
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        # FIXME : quand on recherche un groupe qui n'existe pas, on a un code retour 200 
        # avec une r√©ponse null. Pourquoi ne pas faire un code retour 404 ? 

    put:
      summary: Modifier un groupe utilisateur
      description: >
        L'API propose de pouvoir modifier le nom et la date d'expiration d'un groupe utilisateur.

        Si l'on souhaite supprimer la date d'expiration il suffit d'envoyer une date vide.
      tags:
        - Groupe d'utilisateurs
      
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: ID du groupe √† mettre √† jour

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Nouveau nom"
                expirationDate:
                  type: string
                  description: date √† partir de laquelle les apprenants n'auront plus acc√®s aux publications du groupe.
                  example: "2023-12-31"
      responses:
        '200':
          description: Groupe mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/GroupDetail"
                    #FIXME : Il y a une erreur sur l‚Äôapi qui retourne ce format, on retourne le document brut qui provient de la DB alors qu‚Äôil devrait √™tre format√© => Passer sur le mod√®le Group
        '403':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Supprimer un groupe utilisateur
      tags:
        - Groupe d'utilisateurs
      description: >
        Supprime un groupe un groupe utilisateur √† partir de son ID.


        üö® Le groupe est supprim√© m√™me s'il a des utilisateurs et des publications ! üö®
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: ID du groupe √† supprimer
      responses:
        '204':
          description: Groupe supprim√© avec succ√®s
          content: {}
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        #FIXME : Si le groupe √† supprimer n'existe pas on a un retour 204 comme si tout √©tait ok. IL faudrait ajouter une erreur 404

  

  /groups/{groupId}/users/{userId}:
    put:
      summary: Ajouter un utilisateur (apprenant) √† un groupe.
      description: >
        Cette API permet d'ajouter un utilisateur √† un groupe. Cet utilisateur aura obligatoirement le r√¥le d'apprenant.
        

        Il n'est pas possible d'ajouter un utilisateur avec un autre r√¥le.
      tags:
        - Groupe d'utilisateurs
        - Utilisateur
      parameters:
        - in: path
          name: groupId
          required: true
          example: 6661758bc1ec3600177f42d1
          schema:
            $ref: '#/components/schemas/DidaskId'
          description: ID du groupe
        - in: path
          name: userId
          example: 6661758bc1ec3600177f42d1
          required: true
          schema:
            $ref: '#/components/schemas/DidaskId'
          description: ID de l'utilisateur
      responses:
        '204':
          description: L'utilisateur a correctement √©t√© ajout√© au groupe d'utilisateurs.
          content: {}
          #FIXME : si l'on utilise des ID correctement format√©s mais qui n'existent pas 
          # on n'a aucune info sur le fait que cela n'a pas fonctionn√©
          # => Ajouter une nouvelle r√©ponse
        '500':
          description: >
            Les ID communiqu√©s ne sont pas de la bonne forme.
            

            le code renvoy√© sera ```error.unknown```
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: object
                    nullable: true
                    description: Aucune valeur ne sera retourn√©e
                    example: null
                  error:
                    $ref: '#/components/schemas/Error'
    delete:
      summary: Supprimer un utilisateur d'un groupe
      description: >
        Supprime un utilisateur d'un groupe sp√©cifi√©. 
      tags:
        - Groupe d'utilisateurs
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: ID du groupe
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID de l'utilisateur
      responses:
        '204':
          description: Utilisateur supprim√© du groupe
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Groupe ou utilisateur non trouv√©

  /spaces:
    get:
      summary: Liste des espaces de travail
      description: >
        Cette API permet de r√©cup√®rer la liste de tous les espaces. 
      tags:
        - Espace de travail
      security:
        - CookieAuth: []
      responses:
        '200':
          description: Liste des espaces de travail
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: liste des espaces de travail
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: libell√© de l'espace de travail
                          example: "Nouvel espace de travail"
                        id:
                          $ref: "#/components/schemas/DidaskId"
                  error:
                    type: object
                    description: code erreur / null si aucune erreur.
                    example: null
                    nullable: true
        '403':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Espace de travail
      summary: Cr√©er un nouvel espace
      description: >
        L'API cr√©e un nouvel espace de travail avec les informations fournies dans le corps de la requ√™te. 

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: nom de l'espace de travail
                  example: "Espace n¬∞3"
      responses:
        '200':
          description: Espace cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    additionalProperties: false
                    properties:
                      name:
                        type: string
                        example: "Espace n¬∞3"
                        description: Nom du groupe cr√©√©
                      id:
                        $ref: "#/components/schemas/DidaskId"
                  error:
                    nullable: true
                    type: object
                    $ref: '#/components/schemas/Error'
        '403':
          $ref: '#/components/responses/UnauthorizedError'


  /spaces/{spaceId}:
    get:
      summary: D√©tail d'un espace de travail.
      tags:
        - Espace de travail
      security:
        - CookieAuth: []
      parameters:
        - in: path
          name: spaceId
          description: Id de l'espace de travail que l'on recherche.
          required: true
          schema:
            $ref: '#/components/schemas/DidaskId'
      responses:
        '200':
          description: Informations sur l'espace
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Identifiant unique de l'espace de travail
                        example: "652d106cc882d704c06cb75e"
                      name:
                        type: string
                        description: Nom de l'espace de travail.
                        example: "Espace par d√©faut"
                  error:
                    type: object
                    description: Null car il n'y a pas d'erreur
                    nullable: true
                    example: null
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: >
            l'espace de travail demand√© n'existe pas.

            Le code erreur sera ``document.not_found`` 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: object
                    nullable: true
                    description: Aucune valeur ne sera retourn√©e
                    example: null
                  error:
                    $ref: '#/components/schemas/Error'
        '500':
          description: |
            Erreur lors de la recherche de l'espace de travail. 
            
            
            Cela se produit nottament lorsque l'id demand√© n'est pas une chaine de 24 caract√®res hexa.


            Le code erreur sera ``error.unknown``
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: Le champ data est null
                    example: null
                  error:
                    $ref: '#/components/schemas/Error'
    put:
      summary: Mise √† jour d'un espace de travail
      tags:
        - Espace de travail
      description: >
        Met √† jour les informations d'un espace existant. 
      parameters:
        - in: path
          name: spaceId
          required: true
          schema:
            type: string
          description: ID de l'espace √† mettre √† jour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Nouveau nom"
      responses:
        '200':
          description: Espace mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "6617fbe0d11a56b2686c9e6b"
                      name:
                        type: string
                        example: "Nouveau nom"
                  error:  
                    type: object
                    nullable: true
        '403':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Suppression d'un espace de travail
      tags:
        - Espace de travail
      description: >
        Supprime un espace existant par son ID. 

        La suppression n'est possible que si l'espace de travail est vide. Dans le cas contraire, un code retour 500 sera renvoy√©.
      parameters:
        - in: path
          name: spaceId
          required: true
          schema:
            type: string
          description: ID de l'espace √† supprimer
      responses:
        '200':
          description: Espace supprim√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  error:
                    type: string
                    nullable: true
                    example: null
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Espace non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: L'espace de travail n'est pas vide, la suppression a √©chou√©.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /publications/{publicationId}/users/{userId}/progression:
    get:
      summary: R√©cup√©rer la progression d√©taill√©e d'un apprenant sur une publication
      description: R√©cup√®re la progression d√©taill√©e d'un utilisateur pour une publication sp√©cifique.
      tags:
        - Publication
        - Utilisateur
      parameters:
        - in: path
          name: publicationId
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{24}$"
          example: "623f311123438e114fvbcb31"
        - in: path
          name: userId
          required: true
          schema:
            type: string
            pattern: "^[a-fA-F0-9]{24}$"
          example: "123431123443abcd4fab1231"

      responses:
        '200':
          description: Progression d√©taill√©e de l'utilisateur pour la publication
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "razrtel.dunet@mator.com"
                        description: Email de l'apprenant
                      first_name:
                        type: string
                        example: "Razrtel"
                        description: Pr√©nom de l'apprenant
                        #Fixme : passzer en Camel case comme le reste
                      last_name:
                        type: string
                        example: "Dunet"
                        description: Nom de famille de l'apprenant
                        #fixme : passer en camel case comme le reste
                      dateStarted:
                        type: string
                        format: date-time
                        nullable: true
                        example: "2022-04-28 15:48"
                        description: Date de d√©but de r√©alisation de la publication par l'apprenant
                      lastActivity:
                        type: string
                        format: date-time
                        example: "2022-04-29 07:13"
                        description: Date de derni√®re activit√© r√©alis√©e par l'apprenant sur la publication (Visualisation ou r√©alisation d'exercices)
                      evaluationAttempts:
                        type: integer
                        example: 0
                        description: Nombre d'essais effectu√©s par l'apprenant pour valider la publication.
                      evaluationScore:
                        type: integer
                        nullable: true
                        example: null
                        description: Score obtenu 
                      name:
                        type: string
                        example: "Publication name"
                        description: Nom de la publication
                      modules:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: object
                              properties:
                                fr:
                                  type: string
                                  description: Libell√© du module en francais
                                xx:
                                  type: string
                                  description: Libell√© du module en xx (anglais, allemand, ...). N'existe que si la traduction a √©t√© r√©alis√©e
                            duration:
                              type: integer
                              example: 10
                              description: Dur√©e pass√©e au total sur le module
                            score:
                              type: integer
                              example: 100
                              description: Score obtenu sur le module (Sur 100)
                      sessionDuration:
                        type: integer
                        example: 40
                        description: Temps pass√© (en minutes) sur la publication par l'utilisateur.
                      completedModulesCount:
                        type: integer
                        description: Nombre de modules termin√©s
                        example: 2
                      completionPercentage:
                        type: integer
                        example: 50
                        description: Pourcentage de r√©alisation de la publication (= completedModulesCount / Nb de modules ).
                      id:
                        $ref: "#/components/schemas/DidaskId"
                        description: Id de la publication.
                        
                        
        '403':
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    Utilisateur:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: Identifiant unique de l'utilisateur
              example: 6310b7768493b1007f544763
            email:
              type: string
              description: Email de l'utilisateur
              example: "callentin@irtshdf.fr"
            first_name:
              type: string
              description: Pr√©nom de l'utilisateur
              example: "cindy 2"
            last_name:
              type: string
              description: Nom de famille de l'utilisateur
              example: "allentin"
            date_created:
              type: string
              format: date-time
              description: Date de cr√©ation de l'utilisateur au format ISO 8601
              example: "2022-09-01T13:45:26.866Z"
            date_updated:
              type: string
              format: date-time
              description: Date de derni√®re mise √† jour de l'utilisateur au format ISO 8601
              example: "2024-10-08T15:37:38.247Z"
            oidcIssuer:
              type: string
              description: >
                  Identifiant du fournisseur d'identit√© OpenID Connect (OIDC) qui a √©mis le jeton pour cet utilisateur.
              example: "https://example-oidc.com/"
              nullable: true
            oidcSubject:
              type: string
              description: >
                  Identifiant unique de l'utilisateur dans le cadre de l'authentification OpenID Connect (OIDC).
              example: "abcd1234"
              nullable: true
            accessCode:
              type: string
              description: Matricule ou code d'acc√®s √† la plateforme. (Mode d'authentification alternatif √† l'email/password)
              example: "moncode23154"
              nullable: true
            roles:
              type: array
              description: Liste des r√¥les de l'utilisateur
              items:
                type: string
              example: ["learner"]
            groups:
              type: array
              description: Liste des groupes auxquels l'utilisateur appartient (vide s'il n'appartient √† aucun groupe)
              items:
                type: string
              example: []
            publications:
              type: array
              description: Liste des publications auxquelles l'utilisateur a acc√®s
              items:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/DidaskId"
                  name:
                    type: string
                    description: Nom de la publication
                    example: "Apprendre √† apprendre - Sciconum - D√©mo DD"
                  progression:
                    type: integer
                    description: Progression de l'utilisateur dans la publication
                    example: 0
                  link:
                    type: string
                    description: Lien vers la publication
                    example: "trial.didask.com/courses/apprendre-a-apprendre-sciconum-demo-dd?panel=introduction"
            disabledDate:
              type: string
              format: date-time
              nullable: true
              description: Date √† laquelle l'utilisateur a √©t√© d√©sactiv√© (null si non d√©sactiv√©).
              example: null
            preferredEmailingLanguage:
              type: string
              description: Langue pr√©f√©r√©e pour les emails
              example: "fr"
            isEmailConfirmed:
              type: boolean
              description: Indique si l'adresse e-mail de l'utilisateur est confirm√©e
              example: true
            lastSeen:
              type: string
              format: date-time
              description: Date de derni√®re connexion de l'utilisateur au format ISO 8601
              example: "2022-09-06T13:58:18.125Z"
            plateformInvitationDates:
              type: array
              items:
                type: string
              description: Liste des dates d'invitation de l'utilisateur
              example: []
            spacesIds:
              type: array
              description: Liste des ID des espaces associ√©s √† l'utilisateur
              items:
                type: string
              example: ["65305dfc128086ef68c5d03f"]
            status:
              type: string
              enum: [standard, disabled, pending, invitation_sent, reactivated]
              description: |
                Status de l'utilisateur :

                  - standard : utilisateur actif
                  - disabled : utilisateur d√©sactiv√©
                  - pending : utilisateur en attente d'activation
                  - invitation_sent : utilisateur a √©t√© invit√© √† la plateforme
                  - reactivated : utilisateur a √©t√© r√©activ√©
              example: "standard"
    Publication:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DidaskId"
        name:
          type: string
          description: Nom de la publication
          example: "Management > La d√©finition des objectifs"
        link:
          type: string
          description: URL qui pointe vers la publication
          example: "trial.didask.com/courses/management-definition-objectifs"
        groups:
          description: Liste des groupes auxquels la publication est associ√©e.
          type: array
          items:
            type: string
          example:
            - "641495c65218ca9148b4fb62"
            - "653768e071920846a7052f6c"
            - "62f612c505ebcd005e676b5a"
        users:
          type: array
          description: Liste des utilisateurs ayant acc√®s en tant qu'apprenant √† cette publication.
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/DidaskId"
              email:
                type: string
                example: "contact@didask.com"
                description: Mail de l'utilisateur
              progression:
                type: integer
                example: 25
                description: Pourcentage d'avancement de l'utilisation dans la r√©alisation de la publication
                # COMMENT EST CALCULE LA PROGRESSSION
          example:
            - id: "59ad6eb0092bd0000b6c4402"
              email: "contact@didask.com"
              progression: 0
            - id: "59ad6eb0092bd0000b6c4404"
              email: "contact1@didask.com"
              progression: 0
            - id: "6461f5cc133343b32a894e6b"
              email: "contact3@didask.com"
              progression: 20
        project:
          type: object
          description: Projet auquel la publication est rattach√©e.
          additionalProperties: false
          properties:
            id:
              $ref: '#/components/schemas/DidaskId'
            name:
              description: Nom du projet
              type: string
              example: "(Collection) Management"
            locales:
              description: |
                Un projet peut √™tre traduis dans plusieurs langues (en, cs, de, es, fr, it, ja, nl, pl, zh, ar, ru, pt, tr, uk, ro, vi). 
                Cette propri√©t√© retourne les cl√©s des langues dans lesquelles le projet est effectivement traduit.
              type: array
              items:
                type: string
              example:
                - "fr"
      additionalProperties: false
    DidaskId:
      oneOf:
        - type: string
          description: Cha√Æne hexad√©cimale de 12 octets (24 caract√®res hexad√©cimaux)
          pattern: "^[0-9a-fA-F]{24}$"
          example: "5f16fdf70abcf209d05f9d01"
        - type: integer
          description: Identifiant sous forme d'entier √©quivalent √† 12 octets (96 bits)
          example: 123456789012345678901234
      description: |
        Identifiant unique utilis√© dans les objets Didask. 
        
        Il s'agit soit d'une cha√Æne hexad√©cimale de 12 octets, soit d'un entier de 96 bits
      additionalProperties: false
    Error:
      type: object
      description: format des messages d'erreur
      nullable: true
      properties:
          id:
              description: Identifiant unique de l'erreur
              $ref: "#/components/schemas/DidaskId"
          message:
              type: string
              description: Message d√©taillant l'erreur
              example: "il y a une erreur ..."
          code:
              type: string
              description: Code d'erreur sp√©cifique
              example: "domain.error_code"
          status:
              type: integer
              description: Statut HTTP de l'erreur
              example: 500
          requestId:
              type: string
              format: uuid
              description: Identifiant unique de la requ√™te
              example: "0380f404-440f-4586-8135-337fc7b18760"
          cause:
              type: object
              description: Cause de l'erreur (vide par d√©faut)
              example: {}
      additionalProperties: false
    ErrorNull:
      type: string
      description: Absence d'erreur
      nullable: true
      example: null
      additionalProperties: false
    Group:
      type: object
      description: >
        Information de base sur le groupe de travail
      properties:
        id:
          type: string
          example: "670f64a6d3cd2e46ecd7775d"
          pattern: "^[a-fA-F0-9]{24}$"
          description: Identifiant unique du groupe d'utilisateurs
        name:
          type: string
          example: "Service comptabilit√©"
          description: Nom du groupe
            
    GroupDetail:
      #FIXME : le GroupDetail ne devrait pas exister. C'est un retour de la base de donn√©e non format√©. 
      # Le risque c'est que des clients utilisent des donn√©es de ce retour est faible car on ne l'utilise
      # que comme r√©sultat de la cr√©ation et de la modification des groupes.
      type: object
      description: >
        D√©tail du groupe utilisateur.
      properties:
        data:
          type: object
          properties:
            _id:
              #FIXME pourquoi y a t'il un underscore ?
              type: string
              example: "670f64a6d3cd2e46ecd7775d"
              pattern: "^[a-fA-F0-9]{24}$"
              description: Identifiant unique du groupe d'utilisateurs
            name:
              type: string
              example: "Nouveau nom"
              description: Nom du groupe
            expirationDate:
              type: string
              nullable: true
              example: null
              description: Date √† partir de laquelle les publications ne seront plus accessibles aux apprenants
            users:
              type: array
              description: Liste des utilisateurs associ√©s au groupe
              items:
                type: string
              example:
                - "670f651971c666b64d57a8d5"
                - "6661758bc1ec3600177f42d1"
            publications:
              type: array
              description: Liste des publications accessibles pour les utilisateurs de ce groupe.
              items:
                type: string
              example:
                - "670f64507f4d95159cdd7ded"
            programs:
              type: array
              description: Liste des programmes accessibles pour les utilisateurs de ce groupe.
              deprecated: true
              items:
                type: string
              example: []
            createdBy:
              type: string
              example: "6661758bc1ec3600177f42d1"
              description: Identifiant de l'utilisateur qui a cr√©√© le groupe
            editedBy:
              type: string
              example: "6661758bc1ec3600177f42d1"
              description: Identifiant du dernier utilisateur qui a modifi√© le groupe
            trainingSpace:
              type: string
              example: "670e75d78717971b4c7876d2"
              description: Identifiant de l'espace de travail auquel le groupe est associ√©. Pour rappel, un groupe ne peut appartenir qu'√† un espace de travail.
            date_created:
              type: string
              format: date-time
              description: Date de cr√©ation du groupe
              example: "2024-10-16T07:00:54.646Z"
            date_updated:
              type: string
              format: date-time
              description: date de derni√®re modification du groupe
              example: "2024-10-18T09:25:57.656Z"
            __v:
              type: integer
              #FIXME : A quoi cela correspond ?
              example: 0



  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: sid
      description: >
        Pour s'authentifier, il faut d'abord se connecter via l'API d'authentification
        qui renverra un cookie contenant la cl√© `sid`. Le cookie `sid` doit ensuite
        √™tre inclus dans les requ√™tes suivantes pour acc√©der aux points de terminaison prot√©g√©s.

      # TODO documenter la gestion par Token
  
  responses:
    UnauthorizedError:
      description: Vous n'√™tes pas authentifi√©. Cf. ¬ß sur l'authentification.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  id:
                    type: string 
                    format: uuid
                    example: "a5d95c14-d846-4966-9350-c5d66855242f"
                    description: Identifiant unique de l'erreur
                  message:
                    type: string
                    example: "You are not authorized to access this API"
                  code:
                    type: string
                    example: "auth.not_allowed"
                  requestId:
                    type: string
                    example: "9c9d84c6-1234-5678-90ab-cdef12345678"
                    format: uuid
                    description: Identifiant unique de la requ√™te
                  cause:
                    type: object
                    
